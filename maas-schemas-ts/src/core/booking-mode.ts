/*

undefined
Standardized set of properties for all MODE_ objects

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';

export const schemaId = 'http://maasglobal.com/core/booking-mode.json';

// VehicleId
// An identifier used by the TSP to identify a single vehicle ( e.g. taxi, gondola, train or camel )
export type VehicleId = t.Branded<string, VehicleIdBrand>;
export type VehicleIdC = t.BrandC<t.StringC, VehicleIdBrand>;
export const VehicleId: VehicleIdC = t.brand(
  t.string,
  (x): x is t.Branded<string, VehicleIdBrand> => true,
  'VehicleId',
);
export interface VehicleIdBrand {
  readonly VehicleId: unique symbol;
}

// BookingMode
// The default export. More information at the top.
export type BookingMode = t.Branded<
  {
    vehicleId?: VehicleId;
  } & Record<string, unknown>,
  BookingModeBrand
>;
export type BookingModeC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        vehicleId: typeof VehicleId;
      }>,
      t.RecordC<t.StringC, t.UnknownC>,
    ]
  >,
  BookingModeBrand
>;
export const BookingMode: BookingModeC = t.brand(
  t.intersection([
    t.partial({
      vehicleId: VehicleId,
    }),
    t.record(t.string, t.unknown),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      vehicleId?: VehicleId;
    } & Record<string, unknown>,
    BookingModeBrand
  > => true,
  'BookingMode',
);
export interface BookingModeBrand {
  readonly BookingMode: unique symbol;
}

export default BookingMode;

// Success
