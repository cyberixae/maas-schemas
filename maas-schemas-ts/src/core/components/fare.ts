/*

undefined
undefined

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';
import * as Units_ from 'maas-schemas-ts/core/components/units';
import { NonEmptyArray } from 'fp-ts/lib/NonEmptyArray';
import { nonEmptyArray } from 'io-ts-types/lib/nonEmptyArray';

type Defined =
  | Record<string, unknown>
  | Array<unknown>
  | string
  | boolean
  | number
  | null;
const Defined = t.union([
  t.UnknownRecord,
  t.UnknownArray,
  t.string,
  t.boolean,
  t.number,
  t.null,
]);

export const schemaId = 'http://maasglobal.com/core/components/fare.json';

// TokenId
// The purpose of this remains a mystery
export type TokenId = t.Branded<string, TokenIdBrand>;
export const TokenId = t.brand(
  t.string,
  (x): x is t.Branded<string, TokenIdBrand> =>
    typeof x !== 'string' || x.match(RegExp('^[a-z]+(-[a-z]+)*-[a-z0-9_]+$')) !== null,
  'TokenId',
);
export interface TokenIdBrand {
  readonly TokenId: unique symbol;
}

// FareTypeCHARGE
// The purpose of this remains a mystery
export type FareTypeCHARGE = t.Branded<'charge', FareTypeCHARGEBrand>;
export const FareTypeCHARGE = t.brand(
  t.literal('charge'),
  (x): x is t.Branded<'charge', FareTypeCHARGEBrand> => true,
  'FareTypeCHARGE',
);
export interface FareTypeCHARGEBrand {
  readonly FareTypeCHARGE: unique symbol;
}

// FareTypeREFUND
// The purpose of this remains a mystery
export type FareTypeREFUND = t.Branded<'refund', FareTypeREFUNDBrand>;
export const FareTypeREFUND = t.brand(
  t.literal('refund'),
  (x): x is t.Branded<'refund', FareTypeREFUNDBrand> => true,
  'FareTypeREFUND',
);
export interface FareTypeREFUNDBrand {
  readonly FareTypeREFUND: unique symbol;
}

// FareType
// The purpose of this remains a mystery
export type FareType = t.Branded<FareTypeCHARGE | FareTypeREFUND, FareTypeBrand>;
export const FareType = t.brand(
  t.union([FareTypeCHARGE, FareTypeREFUND]),
  (x): x is t.Branded<FareTypeCHARGE | FareTypeREFUND, FareTypeBrand> => true,
  'FareType',
);
export interface FareTypeBrand {
  readonly FareType: unique symbol;
}

// WmpAmount
// An amount of in-app credits
export type WmpAmount = t.Branded<number, WmpAmountBrand>;
export const WmpAmount = t.brand(
  t.number,
  (x): x is t.Branded<number, WmpAmountBrand> =>
    (typeof x !== 'number' || x % 1 === 0) && Number.isInteger(x),
  'WmpAmount',
);
export interface WmpAmountBrand {
  readonly WmpAmount: unique symbol;
}
/** examplesWmpAmount // => { _tag: 'Right', right: examplesWmpAmountJson } */
export const examplesWmpAmountJson: NonEmptyArray<unknown> = [1234];
export const examplesWmpAmount = nonEmptyArray(WmpAmount).decode(examplesWmpAmountJson);

// TokenAmount
// An amount of in-app tokens
export type TokenAmount = t.Branded<number, TokenAmountBrand>;
export const TokenAmount = t.brand(
  t.number,
  (x): x is t.Branded<number, TokenAmountBrand> => Number.isInteger(x),
  'TokenAmount',
);
export interface TokenAmountBrand {
  readonly TokenAmount: unique symbol;
}
/** examplesTokenAmount // => { _tag: 'Right', right: examplesTokenAmountJson } */
export const examplesTokenAmountJson: NonEmptyArray<unknown> = [1];
export const examplesTokenAmount = nonEmptyArray(TokenAmount).decode(
  examplesTokenAmountJson,
);

// WmpFields
// collection of in-app credit fields shared by fare and balance
export type WmpFields = t.Branded<
  {
    currency?: Units_.MetaCurrencyWMP;
    amount?: WmpAmount;
    originalAmount?: WmpAmount;
    productionAmount?: WmpAmount;
  },
  WmpFieldsBrand
>;
export const WmpFields = t.brand(
  t.partial({
    currency: Units_.MetaCurrencyWMP,
    amount: WmpAmount,
    originalAmount: WmpAmount,
    productionAmount: WmpAmount,
  }),
  (
    x,
  ): x is t.Branded<
    {
      currency?: Units_.MetaCurrencyWMP;
      amount?: WmpAmount;
      originalAmount?: WmpAmount;
      productionAmount?: WmpAmount;
    },
    WmpFieldsBrand
  > => true,
  'WmpFields',
);
export interface WmpFieldsBrand {
  readonly WmpFields: unique symbol;
}

// TokenFields
// collection of token fields shared by fare and balance
export type TokenFields = t.Branded<
  {
    currency?: Units_.MetaCurrencyTOKEN;
    tokenId?: TokenId;
    amount?: TokenAmount;
    originalAmount?: TokenAmount;
    productionAmount?: TokenAmount;
  } & {
    tokenId: Defined;
  },
  TokenFieldsBrand
>;
export const TokenFields = t.brand(
  t.intersection([
    t.partial({
      currency: Units_.MetaCurrencyTOKEN,
      tokenId: TokenId,
      amount: TokenAmount,
      originalAmount: TokenAmount,
      productionAmount: TokenAmount,
    }),
    t.type({
      tokenId: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      currency?: Units_.MetaCurrencyTOKEN;
      tokenId?: TokenId;
      amount?: TokenAmount;
      originalAmount?: TokenAmount;
      productionAmount?: TokenAmount;
    } & {
      tokenId: Defined;
    },
    TokenFieldsBrand
  > => true,
  'TokenFields',
);
export interface TokenFieldsBrand {
  readonly TokenFields: unique symbol;
}

// AbstractBalance
// The purpose of this remains a mystery
export type AbstractBalance = t.Branded<
  {
    currency?: unknown;
    tokenId?: unknown;
    amount?: unknown;
  } & {
    currency: Defined;
    amount: Defined;
  },
  AbstractBalanceBrand
>;
export const AbstractBalance = t.brand(
  t.intersection([
    t.partial({
      currency: t.unknown,
      tokenId: t.unknown,
      amount: t.unknown,
    }),
    t.type({
      currency: Defined,
      amount: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      currency?: unknown;
      tokenId?: unknown;
      amount?: unknown;
    } & {
      currency: Defined;
      amount: Defined;
    },
    AbstractBalanceBrand
  > => true,
  'AbstractBalance',
);
export interface AbstractBalanceBrand {
  readonly AbstractBalance: unique symbol;
}

// WmpBalance
// An amount of in-app credits with type information
export type WmpBalance = t.Branded<AbstractBalance & WmpFields, WmpBalanceBrand>;
export const WmpBalance = t.brand(
  t.intersection([AbstractBalance, WmpFields]),
  (x): x is t.Branded<AbstractBalance & WmpFields, WmpBalanceBrand> => true,
  'WmpBalance',
);
export interface WmpBalanceBrand {
  readonly WmpBalance: unique symbol;
}
/** examplesWmpBalance // => { _tag: 'Right', right: examplesWmpBalanceJson } */
export const examplesWmpBalanceJson: NonEmptyArray<unknown> = [
  { currency: 'WMP', amount: 1234 },
];
export const examplesWmpBalance = nonEmptyArray(WmpBalance).decode(
  examplesWmpBalanceJson,
);

// TokenBalance
// An amount of in-app tokens with type information
export type TokenBalance = t.Branded<AbstractBalance & TokenFields, TokenBalanceBrand>;
export const TokenBalance = t.brand(
  t.intersection([AbstractBalance, TokenFields]),
  (x): x is t.Branded<AbstractBalance & TokenFields, TokenBalanceBrand> => true,
  'TokenBalance',
);
export interface TokenBalanceBrand {
  readonly TokenBalance: unique symbol;
}
/** examplesTokenBalance // => { _tag: 'Right', right: examplesTokenBalanceJson } */
export const examplesTokenBalanceJson: NonEmptyArray<unknown> = [
  { currency: 'TOKEN', tokenId: 'cx-test-token_v2', amount: 1 },
];
export const examplesTokenBalance = nonEmptyArray(TokenBalance).decode(
  examplesTokenBalanceJson,
);

// Balance
// The purpose of this remains a mystery
export type Balance = t.Branded<WmpBalance | TokenBalance, BalanceBrand>;
export const Balance = t.brand(
  t.union([WmpBalance, TokenBalance]),
  (x): x is t.Branded<WmpBalance | TokenBalance, BalanceBrand> => true,
  'Balance',
);
export interface BalanceBrand {
  readonly Balance: unique symbol;
}

// BalancesArray
// The purpose of this remains a mystery
export type BalancesArray = t.Branded<Array<Balance>, BalancesArrayBrand>;
export const BalancesArray = t.brand(
  t.array(Balance),
  (x): x is t.Branded<Array<Balance>, BalancesArrayBrand> => true,
  'BalancesArray',
);
export interface BalancesArrayBrand {
  readonly BalancesArray: unique symbol;
}

// BalancesObject
// A summary of in-app credit and tokens
export type BalancesObject = t.Branded<
  ({
    WMP?: WmpBalance;
  } & Record<string, WmpBalance | TokenBalance>) & {
    WMP: Defined;
  },
  BalancesObjectBrand
>;
export const BalancesObject = t.brand(
  t.intersection([
    t.intersection([
      t.partial({
        WMP: WmpBalance,
      }),
      t.record(t.string, t.union([WmpBalance, TokenBalance])),
    ]),
    t.type({
      WMP: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    ({
      WMP?: WmpBalance;
    } & Record<string, WmpBalance | TokenBalance>) & {
      WMP: Defined;
    },
    BalancesObjectBrand
  > => true,
  'BalancesObject',
);
export interface BalancesObjectBrand {
  readonly BalancesObject: unique symbol;
}
/** examplesBalancesObject // => { _tag: 'Right', right: examplesBalancesObjectJson } */
export const examplesBalancesObjectJson: NonEmptyArray<unknown> = [
  {
    WMP: { currency: 'WMP', amount: 1234, type: 'charge' },
    'cx-test-token_v2': {
      currency: 'TOKEN',
      tokenId: 'cx-test-token_v2',
      amount: 1,
      type: 'charge',
    },
  },
];
export const examplesBalancesObject = nonEmptyArray(BalancesObject).decode(
  examplesBalancesObjectJson,
);

// AbstractFare
// The purpose of this remains a mystery
export type AbstractFare = t.Branded<
  {
    type?: FareType;
    currency?: unknown;
    tokenId?: unknown;
    amount?: unknown;
    originalAmount?: unknown;
    productionAmount?: unknown;
  } & {
    type: Defined;
    currency: Defined;
    amount: Defined;
  },
  AbstractFareBrand
>;
export const AbstractFare = t.brand(
  t.intersection([
    t.partial({
      type: FareType,
      currency: t.unknown,
      tokenId: t.unknown,
      amount: t.unknown,
      originalAmount: t.unknown,
      productionAmount: t.unknown,
    }),
    t.type({
      type: Defined,
      currency: Defined,
      amount: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      type?: FareType;
      currency?: unknown;
      tokenId?: unknown;
      amount?: unknown;
      originalAmount?: unknown;
      productionAmount?: unknown;
    } & {
      type: Defined;
      currency: Defined;
      amount: Defined;
    },
    AbstractFareBrand
  > => true,
  'AbstractFare',
);
export interface AbstractFareBrand {
  readonly AbstractFare: unique symbol;
}

// WmpFare
// The cost of a booking in in-app credits
export type WmpFare = t.Branded<AbstractFare & WmpFields, WmpFareBrand>;
export const WmpFare = t.brand(
  t.intersection([AbstractFare, WmpFields]),
  (x): x is t.Branded<AbstractFare & WmpFields, WmpFareBrand> => true,
  'WmpFare',
);
export interface WmpFareBrand {
  readonly WmpFare: unique symbol;
}
/** examplesWmpFare // => { _tag: 'Right', right: examplesWmpFareJson } */
export const examplesWmpFareJson: NonEmptyArray<unknown> = [
  { currency: 'WMP', amount: 1234, type: 'charge' },
];
export const examplesWmpFare = nonEmptyArray(WmpFare).decode(examplesWmpFareJson);

// TokenFare
// The cost of a booking in in-app tokens
export type TokenFare = t.Branded<AbstractFare & TokenFields, TokenFareBrand>;
export const TokenFare = t.brand(
  t.intersection([AbstractFare, TokenFields]),
  (x): x is t.Branded<AbstractFare & TokenFields, TokenFareBrand> => true,
  'TokenFare',
);
export interface TokenFareBrand {
  readonly TokenFare: unique symbol;
}
/** examplesTokenFare // => { _tag: 'Right', right: examplesTokenFareJson } */
export const examplesTokenFareJson: NonEmptyArray<unknown> = [
  { currency: 'TOKEN', tokenId: 'cx-test-token_v2', amount: 1, type: 'charge' },
];
export const examplesTokenFare = nonEmptyArray(TokenFare).decode(examplesTokenFareJson);

// Fare
// The default export. More information at the top.
export type Fare = t.Branded<unknown, FareBrand>;
export const Fare = t.brand(
  t.unknown,
  (x): x is t.Branded<unknown, FareBrand> => true,
  'Fare',
);
export interface FareBrand {
  readonly Fare: unique symbol;
}

// FareArray
// The purpose of this remains a mystery
export type FareArray = t.Branded<Array<Fare>, FareArrayBrand>;
export const FareArray = t.brand(
  t.array(Fare),
  (x): x is t.Branded<Array<Fare>, FareArrayBrand> => true,
  'FareArray',
);
export interface FareArrayBrand {
  readonly FareArray: unique symbol;
}

export default Fare;

// Success
