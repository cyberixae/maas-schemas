/*

undefined
MaaS schema for address related information

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';
import * as Common_ from 'maas-schemas-ts/core/components/common';

export const schemaId = 'http://maasglobal.com/core/components/address.json';
// ComponentAddress
// Encoded address components in form country:Finland|state:Uusimaa|city:Helsinki|zipCode:00100|streetName:Ludviginkatu|streetNumber:6
export type ComponentAddress = t.Branded<string, ComponentAddressBrand>;
export const ComponentAddress = t.brand(
  t.string,
  (x): x is t.Branded<string, ComponentAddressBrand> =>
    typeof x !== 'string' ||
    x.match(
      RegExp(
        "^(?:(?:(?:country:(?:\\p{L}|\\s|')+)|(?:state:(?:\\p{L}|[,\\.:\\-`'´\\s])+)|(?:city:(?:\\p{L}|[,\\.:\\-`'´\\s])+)|(?:zipCode:(?:[a-zA-Z0-9 ]{3,10}|(?:\\p{L}|\\d){2,4}(\\s(?:\\p{L}|\\d){2,4})?))|(?:streetName:[^|]+)|(?:streetNumber:\\d+))\\|?){4,6}$",
        'u',
      ),
    ) !== null,
  'ComponentAddress',
);
export interface ComponentAddressBrand {
  readonly ComponentAddress: unique symbol;
}
export const jsonComponentAddressExamples: Array<unknown> = [null];
export const safeComponentAddressExamples = t
  .array(ComponentAddress)
  .decode(jsonComponentAddressExamples);

// PlaceName
// Place name (given in autocomplete)
export type PlaceName = t.Branded<string, PlaceNameBrand>;
export const PlaceName = t.brand(
  t.string,
  (x): x is t.Branded<string, PlaceNameBrand> => typeof x !== 'string' || x.length >= 1,
  'PlaceName',
);
export interface PlaceNameBrand {
  readonly PlaceName: unique symbol;
}
export const jsonPlaceNameExamples: Array<unknown> = [null];
export const safePlaceNameExamples = t.array(PlaceName).decode(jsonPlaceNameExamples);

// FirstName
// The purpose of this remains a mystery
export type FirstName = Common_.PersonalName;
export const FirstName = Common_.PersonalName;
export const jsonFirstNameExamples: Array<unknown> = [];
export const safeFirstNameExamples = t.array(FirstName).decode(jsonFirstNameExamples);

// LastName
// The purpose of this remains a mystery
export type LastName = Common_.PersonalName;
export const LastName = Common_.PersonalName;
export const jsonLastNameExamples: Array<unknown> = [];
export const safeLastNameExamples = t.array(LastName).decode(jsonLastNameExamples);

// Phone
// The purpose of this remains a mystery
export type Phone = Common_.Phone;
export const Phone = Common_.Phone;
export const jsonPhoneExamples: Array<unknown> = [];
export const safePhoneExamples = t.array(Phone).decode(jsonPhoneExamples);

// Email
// The purpose of this remains a mystery
export type Email = Common_.Email;
export const Email = Common_.Email;
export const jsonEmailExamples: Array<unknown> = [];
export const safeEmailExamples = t.array(Email).decode(jsonEmailExamples);

// Address
// Street address (and optional number), http://www.bitboost.com/ref/international-address-formats.html
export type Address = t.Branded<string, AddressBrand>;
export const Address = t.brand(
  t.string,
  (x): x is t.Branded<string, AddressBrand> => typeof x !== 'string' || x.length >= 2,
  'Address',
);
export interface AddressBrand {
  readonly Address: unique symbol;
}
export const jsonAddressExamples: Array<unknown> = [null];
export const safeAddressExamples = t.array(Address).decode(jsonAddressExamples);

// ZipCode
// Numeric zip code, see https://en.wikipedia.org/wiki/Postal_code
export type ZipCode = t.Branded<string, ZipCodeBrand>;
export const ZipCode = t.brand(
  t.string,
  (x): x is t.Branded<string, ZipCodeBrand> =>
    (typeof x !== 'string' || x.length >= 2) && (typeof x !== 'string' || x.length <= 64),
  'ZipCode',
);
export interface ZipCodeBrand {
  readonly ZipCode: unique symbol;
}
export const jsonZipCodeExamples: Array<unknown> = [null];
export const safeZipCodeExamples = t.array(ZipCode).decode(jsonZipCodeExamples);

// CountryName
// Alphabetic country name
export type CountryName = t.Branded<string, CountryNameBrand>;
export const CountryName = t.brand(
  t.string,
  (x): x is t.Branded<string, CountryNameBrand> =>
    (typeof x !== 'string' || x.match(RegExp("^(?:\\p{L}|\\s|')+$", 'u')) !== null) &&
    (typeof x !== 'string' || x.length <= 64),
  'CountryName',
);
export interface CountryNameBrand {
  readonly CountryName: unique symbol;
}
export const jsonCountryNameExamples: Array<unknown> = [null];
export const safeCountryNameExamples = t
  .array(CountryName)
  .decode(jsonCountryNameExamples);

// Country
// ISO 3166-1 alpha-2 country code, see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
export type Country = t.Branded<string, CountryBrand>;
export const Country = t.brand(
  t.string,
  (x): x is t.Branded<string, CountryBrand> =>
    typeof x !== 'string' || x.match(RegExp('^[A-Z]{2,2}$', 'u')) !== null,
  'Country',
);
export interface CountryBrand {
  readonly Country: unique symbol;
}
export const jsonCountryExamples: Array<unknown> = [null];
export const safeCountryExamples = t.array(Country).decode(jsonCountryExamples);

// City
// Alphabetic city name
export type City = t.Branded<string, CityBrand>;
export const City = t.brand(
  t.string,
  (x): x is t.Branded<string, CityBrand> => typeof x !== 'string' || x.length >= 1,
  'City',
);
export interface CityBrand {
  readonly City: unique symbol;
}
export const jsonCityExamples: Array<unknown> = [null];
export const safeCityExamples = t.array(City).decode(jsonCityExamples);

// Default
// The default export. More information at the top.
export type Default = t.Branded<unknown, DefaultBrand>;
export const Default = t.brand(
  t.unknown,
  (x): x is t.Branded<unknown, DefaultBrand> => true,
  'Default',
);
export interface DefaultBrand {
  readonly Default: unique symbol;
}
export const jsonDefaultExamples: Array<unknown> = [null];
export const safeDefaultExamples = t.array(Default).decode(jsonDefaultExamples);

export default Default;

// Success
