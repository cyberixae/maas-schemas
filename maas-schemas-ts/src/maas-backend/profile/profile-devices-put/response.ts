/*

undefined
Response schema for profile-devices-put

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';
import * as Units_ from 'maas-schemas-ts/core/components/units';

type Defined =
  | Record<string, unknown>
  | Array<unknown>
  | string
  | boolean
  | number
  | null;
const Defined = t.union([
  t.UnknownRecord,
  t.UnknownArray,
  t.string,
  t.boolean,
  t.number,
  t.null,
]);

export const schemaId =
  'http://maasglobal.com/maas-backend/profile/profile-devices-put/response.json';
// Device
// The purpose of this remains a mystery
export type Device = t.Branded<
  {
    devicePushToken?: string;
    deviceIdentifier?: Units_.Uuid;
    deviceType?: string & ('iOS' | 'Android');
  } & {
    devicePushToken: Defined;
    deviceIdentifier: Defined;
    deviceType: Defined;
  },
  DeviceBrand
>;
export const Device = t.brand(
  t.intersection([
    t.partial({
      devicePushToken: t.string,
      deviceIdentifier: Units_.Uuid,
      deviceType: t.intersection([
        t.string,
        t.union([t.literal('iOS'), t.literal('Android')]),
      ]),
    }),
    t.type({
      devicePushToken: Defined,
      deviceIdentifier: Defined,
      deviceType: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      devicePushToken?: string;
      deviceIdentifier?: Units_.Uuid;
      deviceType?: string & ('iOS' | 'Android');
    } & {
      devicePushToken: Defined;
      deviceIdentifier: Defined;
      deviceType: Defined;
    },
    DeviceBrand
  > => true,
  'Device',
);
export interface DeviceBrand {
  readonly Device: unique symbol;
}
export const jsonDeviceExamples: Array<unknown> = [];
export const safeDeviceExamples = t.array(Device).decode(jsonDeviceExamples);
// Default
// The default export. More information at the top.
export type Default = t.Branded<
  {
    device?: Device;
    debug?: {};
  } & {
    device: Defined;
  },
  DefaultBrand
>;
export const Default = t.brand(
  t.intersection([
    t.partial({
      device: Device,
      debug: t.type({}),
    }),
    t.type({
      device: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      device?: Device;
      debug?: {};
    } & {
      device: Defined;
    },
    DefaultBrand
  > => true,
  'Default',
);
export interface DefaultBrand {
  readonly Default: unique symbol;
}
export const jsonDefaultExamples: Array<unknown> = [];
export const safeDefaultExamples = t.array(Default).decode(jsonDefaultExamples);

export default Default;

// Success
