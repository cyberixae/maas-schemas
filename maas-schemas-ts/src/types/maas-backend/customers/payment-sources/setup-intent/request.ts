/*

undefined
MaaS customer payment sources setup intent create

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as Units_ from '../../../../core/components/units';
import * as Common_ from '../../../../core/components/common';
import * as PaymentSource_ from '../paymentSource';
import * as ApiCommon_ from '../../../../core/components/api-common';

type Defined =
  | Record<string, unknown>
  | Array<unknown>
  | string
  | boolean
  | number
  | null;
const Defined = t.union([
  t.UnknownRecord,
  t.UnknownArray,
  t.string,
  t.boolean,
  t.number,
  t.null,
]);

export const schemaId =
  'http://maasglobal.com/maas-backend/customers/payment-sources/setup-intent/request.json';

// Request
// The default export. More information at the top.
export type Request = t.Branded<
  {
    identityId?: Units_.IdentityId;
    customerId?: Units_.IdentityId;
    payload?: {
      setupIntent?: {
        paymentSourceId?: Common_.PaymentSourceId;
        gatewayName?: PaymentSource_.GatewayName;
        isDefault?: boolean;
        type?: PaymentSource_.Type;
        alias?: PaymentSource_.Alias;
      } & {
        paymentSourceId: Defined;
        gatewayName: Defined;
        isDefault: Defined;
        type: Defined;
      };
    } & {
      setupIntent: Defined;
    };
    headers?: ApiCommon_.Headers;
  } & {
    identityId: Defined;
    customerId: Defined;
    payload: Defined;
    headers: Defined;
  },
  RequestBrand
>;
export const Request = t.brand(
  t.intersection([
    t.partial({
      identityId: Units_.IdentityId,
      customerId: Units_.IdentityId,
      payload: t.intersection([
        t.partial({
          setupIntent: t.intersection([
            t.partial({
              paymentSourceId: Common_.PaymentSourceId,
              gatewayName: PaymentSource_.GatewayName,
              isDefault: t.boolean,
              type: PaymentSource_.Type,
              alias: PaymentSource_.Alias,
            }),
            t.type({
              paymentSourceId: Defined,
              gatewayName: Defined,
              isDefault: Defined,
              type: Defined,
            }),
          ]),
        }),
        t.type({
          setupIntent: Defined,
        }),
      ]),
      headers: ApiCommon_.Headers,
    }),
    t.type({
      identityId: Defined,
      customerId: Defined,
      payload: Defined,
      headers: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      identityId?: Units_.IdentityId;
      customerId?: Units_.IdentityId;
      payload?: {
        setupIntent?: {
          paymentSourceId?: Common_.PaymentSourceId;
          gatewayName?: PaymentSource_.GatewayName;
          isDefault?: boolean;
          type?: PaymentSource_.Type;
          alias?: PaymentSource_.Alias;
        } & {
          paymentSourceId: Defined;
          gatewayName: Defined;
          isDefault: Defined;
          type: Defined;
        };
      } & {
        setupIntent: Defined;
      };
      headers?: ApiCommon_.Headers;
    } & {
      identityId: Defined;
      customerId: Defined;
      payload: Defined;
      headers: Defined;
    },
    RequestBrand
  > => true,
  'Request',
);
export interface RequestBrand {
  readonly Request: unique symbol;
}

export default Request;

// Success
