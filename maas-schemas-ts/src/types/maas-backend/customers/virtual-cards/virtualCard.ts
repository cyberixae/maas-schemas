/*

undefined
MaaS virtual card schema

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as VirtualCardTokenReference_ from './virtualCardTokenReference';

type Defined =
  | Record<string, unknown>
  | Array<unknown>
  | string
  | boolean
  | number
  | null;
const Defined = t.union([
  t.UnknownRecord,
  t.UnknownArray,
  t.string,
  t.boolean,
  t.number,
  t.null,
]);

export const schemaId =
  'http://maasglobal.com/maas-backend/customers/virtual-cards/virtualCard.json';

// VirtualCard
// The default export. More information at the top.
export type VirtualCard = t.Branded<
  {
    id?: number;
    providerName?: string;
    providerCardId?: string;
    maskedCardNumber?: string;
    expiryMonth?: number;
    expiryYear?: number;
    status?: string & ('CARD_OK' | 'CARD_BLOCKED');
    tokenReferences?: Array<VirtualCardTokenReference_.VirtualCardTokenReference>;
  } & {
    id: Defined;
    providerName: Defined;
    providerCardId: Defined;
    maskedCardNumber: Defined;
    expiryMonth: Defined;
    expiryYear: Defined;
    status: Defined;
    tokenReferences: Defined;
  },
  VirtualCardBrand
>;
export const VirtualCard = t.brand(
  t.intersection([
    t.partial({
      id: t.number,
      providerName: t.string,
      providerCardId: t.string,
      maskedCardNumber: t.string,
      expiryMonth: t.number,
      expiryYear: t.number,
      status: t.intersection([
        t.string,
        t.union([t.literal('CARD_OK'), t.literal('CARD_BLOCKED')]),
      ]),
      tokenReferences: t.array(VirtualCardTokenReference_.VirtualCardTokenReference),
    }),
    t.type({
      id: Defined,
      providerName: Defined,
      providerCardId: Defined,
      maskedCardNumber: Defined,
      expiryMonth: Defined,
      expiryYear: Defined,
      status: Defined,
      tokenReferences: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      id?: number;
      providerName?: string;
      providerCardId?: string;
      maskedCardNumber?: string;
      expiryMonth?: number;
      expiryYear?: number;
      status?: string & ('CARD_OK' | 'CARD_BLOCKED');
      tokenReferences?: Array<VirtualCardTokenReference_.VirtualCardTokenReference>;
    } & {
      id: Defined;
      providerName: Defined;
      providerCardId: Defined;
      maskedCardNumber: Defined;
      expiryMonth: Defined;
      expiryYear: Defined;
      status: Defined;
      tokenReferences: Defined;
    },
    VirtualCardBrand
  > => true,
  'VirtualCard',
);
export interface VirtualCardBrand {
  readonly VirtualCard: unique symbol;
}

export default VirtualCard;

// Success
